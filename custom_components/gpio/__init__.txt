def unload(hass):
    """Stuff to do before stopping."""
    _LOGGER.debug(f"Unloading: {hass.data[DOMAIN]}")


def update_gpiod_lines():
    global gpiod_config, gpiod_lines, gpio_chip
    _LOGGER.debug(f"update_gpiod_lines: {gpiod_config}")

    if gpiod_lines:
        gpiod_lines.release()

    gpiod_lines = gpiod.request_lines(
        gpio_chip,
        consumer="ha-gpio",
        config=gpiod_config)

def setup_output(port, invert_logic):
    """Set up a GPIO as output."""
    _LOGGER.info(f"setup_output: {port}, {invert_logic}")
    global gpiod_config
    gpiod_config[port].direction = gpiod.line.Direction.OUTPUT
    gpiod_config[port].output_value = gpiod.line.Value.ACTIVE if invert_logic else gpiod.line.Value.INACTIVE

    update_gpiod_lines()

def setup_input(port, pull_mode):
    """Set up a GPIO as input."""
    _LOGGER.info(f"setup_input: { port }, { pull_mode }")
    global gpiod_config
    gpiod_config[port].direction = gpiod.line.Direction.INPUT
    gpiod_config[port].bias = gpiod.line.Bias.PULL_DOWN if pull_mode == "DOWN" else gpiod.line.Bias.PULL_UP

    update_gpiod_lines()

def write_output(port, value):
    """Write a value to a GPIO."""
    _LOGGER.debug(f"write_output: { port }, { value }")
    global gpiod_lines
    gpiod_lines.set_value(port, gpiod.line.Value.ACTIVE if value else gpiod.line.Value.INACTIVE)

def read_input(port):
    """Read a value from a GPIO."""
    _LOGGER.debug(f"read_output: { port }")
    global gpiod_lines
    return gpiod_lines.get_value(port) == gpiod.line.Value.ACTIVE

def edge_detect(port, bounce):
    """Add detection for RISING and FALLING events."""
    _LOGGER.info(f"edge_detect: { port }, { bounce }")
    global gpiod_config
    global gpiod_lines

    gpiod_config[port].edge_detection = gpiod.line.Edge.BOTH
    gpiod_config[port].bias = gpiod.line.Bias.PULL_UP
    gpiod_config[port].debounce_period = timedelta(milliseconds=bounce)
    gpiod_config[port].event_clock = gpiod.line.Clock.REALTIME

    return gpiod_lines.wait_edge_events(timedelta(milliseconds=500))


